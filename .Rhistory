panel.grid.minor.y = element_blank(), # remove minor horizontal grid lines
# remove legend
legend.position = "none",
plot.title = element_text(margin = margin(t = 0, r = 0, b = 10, l = 0)),
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
panel.border = element_blank(), # remove outer panel border
axis.ticks.y = element_blank(), # remove ticks from y axis
text = element_text(family = "Arial")) +
ggtitle('gesture production by participant') +
xlab('participant id (arranged by total gesture production)\n') +
ylab('proportion of trials with gesture')
dist_gest <- X %>%
ggplot() +
geom_col(aes(x = reorder(ID, percent_gestured), y = percent_gestured, #group = SUBJ,
fill = as.factor(SPACE_IV), alpha = .85)) +
# scale_y_continuous(expand = c(0, 0)) +
# scale_x_continuous(breaks = c(seq(1:24)), expand = c(0, 0)) +
# change color scheme of fill colors
scale_fill_manual("fill_constant", values = c("#8da0cb", "#66c2a5")) +
scale_y_continuous(expand = c(0, 0)) +
theme_light() +
theme(panel.grid.major.x = element_blank(), # remove vertical grid lines
panel.grid.minor.x = element_blank(), # remove vertical grid lines
panel.grid.minor.y = element_blank(), # remove minor horizontal grid lines
# remove legends (unnecessary here)
legend.position = "none", ### TEMP
plot.title = element_text(margin = margin(t = 0, r = 0, b = 10, l = 0)),
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = -5, l = 0)),
panel.border = element_blank(), # remove outer panel border
axis.ticks.y = element_blank(), # remove ticks from y axis
text = element_text(family = "Arial")) +
ggtitle('gesture production by participant') +
xlab('participant id (arranged by total gesture production)\n') +
ylab('proportion of trials with gesture')
ggplotly(dist_gest, tooltip = c("x", "y", "SPACE_IV"), session = "knitr")
dist_gest <- X %>%
ggplot() +
geom_col(aes(x = reorder(ID, percent_gestured), y = percent_gestured, #group = SUBJ,
fill = as.factor(SPACE_IV), alpha = .85)) +
# scale_y_continuous(expand = c(0, 0)) +
# scale_x_continuous(breaks = c(seq(1:24)), expand = c(0, 0)) +
# change color scheme of fill colors
scale_fill_manual("fill_constant", values = c("#8da0cb", "#66c2a5")) +
scale_y_continuous(expand = c(0, 0)) +
theme_light() +
theme(panel.grid.major.x = element_blank(), # remove vertical grid lines
panel.grid.minor.x = element_blank(), # remove vertical grid lines
panel.grid.minor.y = element_blank(), # remove minor horizontal grid lines
# remove legends (unnecessary here)
legend.position = "none", ### TEMP
plot.title = element_text(margin = margin(t = 0, r = 0, b = 10, l = 0)),
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = -5, l = 0)),
panel.border = element_blank(), # remove outer panel border
axis.ticks.y = element_blank(), # remove ticks from y axis
text = element_text(family = "Arial")) +
ggtitle('gesture production by participant') +
xlab('participant id (arranged by total gesture production)\n') +
ylab('proportion of trials with gesture')
ggplotly(dist_gest, tooltip = c("x", "y", "SPACE_IV"), session = "knitr")
dist_gest_04 <- X %>%
ggplot() +
geom_hline(aes(yintercept = mean(percent_gestured)*2, 'total mean' = 0.524),
color = "#2e184b", size = 0.3) +
geom_col(aes(x = reorder(ID, percent_gestured), y = percent_gestured, #group = SUBJ,
fill = as.factor(SPACE_IV), alpha = .85)) +
# change color scheme of fill colors
scale_fill_manual("fill_constant", values = c("#8da0cb", "#66c2a5")) +
scale_y_continuous(expand = c(0, 0)) +
# scale_x_continuous(breaks = c(seq(1:24)), expand = c(0, 0)) +
theme_light() +
theme(panel.grid.major.x = element_blank(), # remove vertical grid lines
panel.grid.minor.x = element_blank(), # remove vertical grid lines
panel.grid.minor.y = element_blank(), # remove minor horizontal grid lines
# remove legend
legend.position = "none",
plot.title = element_text(margin = margin(t = 0, r = 0, b = 10, l = 0)),
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
panel.border = element_blank(), # remove outer panel border
axis.ticks.y = element_blank(), # remove ticks from y axis
text = element_text(family = "Arial")) +
ggtitle('gesture production by participant') +
xlab('participant id (arranged by total gesture production)\n') +
ylab('proportion of trials with gesture')
dist_gest_04
ggplotly(dist_gest_04, tooltip = c("total mean", "spatial mean", "all"))
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(ggplot2)
library(plotly)
library(ggthemes)
library(magrittr)
library(tidyverse)
ggplotly(dist_gest_04, tooltip = c("total mean", "spatial mean", "all"))
View(X)
ggplotly(dist_gest_04, tooltip = c("total mean", "spatial mean", "percent_gestured", "SPACE_IV"))
'total mean =' <- round(mean(X$percent_gestured)*2, digits = 3)
dist_gest_04 <- X %>%
ggplot() +
geom_hline(aes(yintercept = mean(percent_gestured)*2, 'total mean' = 0.524),
color = "#2e184b", size = 0.3) +
# label mean line
geom_text(x = 3, y = (mean(X$percent_gestured)*2 + 0.03),
aes(label = "total mean = "), color = "#2e184b") +
geom_text(x = 6, y = (mean(X$percent_gestured)*2 + 0.03),
aes(label = round(mean(percent_gestured)*2, digits = 3)), color = "#2e184b") +
geom_col(aes(x = reorder(ID, percent_gestured), y = percent_gestured, #group = SUBJ,
fill = as.factor(SPACE_IV), alpha = .85)) +
# change color scheme of fill colors
scale_fill_manual("fill_constant", values = c("#8da0cb", "#66c2a5")) +
scale_y_continuous(expand = c(0, 0)) +
# scale_x_continuous(breaks = c(seq(1:24)), expand = c(0, 0)) +
theme_light() +
theme(panel.grid.major.x = element_blank(), # remove vertical grid lines
panel.grid.minor.x = element_blank(), # remove vertical grid lines
panel.grid.minor.y = element_blank(), # remove minor horizontal grid lines
# remove legend
legend.position = "none",
plot.title = element_text(margin = margin(t = 0, r = 0, b = 10, l = 0)),
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
panel.border = element_blank(), # remove outer panel border
axis.ticks.y = element_blank(), # remove ticks from y axis
text = element_text(family = "Arial")) +
ggtitle('gesture production by participant') +
xlab('participant id (arranged by total gesture production)\n') +
ylab('proportion of trials with gesture')
ggplotly(dist_gest_04, tooltip = c("total mean", "spatial mean", "percent_gestured", "SPACE_IV"))
dist_gest_04 <- X %>%
ggplot() +
geom_hline(aes(yintercept = mean(percent_gestured)*2, 'total mean' = 0.524),
color = "#2e184b", size = 0.3) +
# label mean line
geom_text(x = 3, y = (mean(X$percent_gestured)*2 + 0.03),
aes(label = "total mean = "), color = "#2e184b") +
geom_text(x = 4.5, y = (mean(X$percent_gestured)*2 + 0.03),
aes(label = round(mean(percent_gestured)*2, digits = 3)), color = "#2e184b") +
geom_col(aes(x = reorder(ID, percent_gestured), y = percent_gestured, #group = SUBJ,
fill = as.factor(SPACE_IV), alpha = .85)) +
# change color scheme of fill colors
scale_fill_manual("fill_constant", values = c("#8da0cb", "#66c2a5")) +
scale_y_continuous(expand = c(0, 0)) +
# scale_x_continuous(breaks = c(seq(1:24)), expand = c(0, 0)) +
theme_light() +
theme(panel.grid.major.x = element_blank(), # remove vertical grid lines
panel.grid.minor.x = element_blank(), # remove vertical grid lines
panel.grid.minor.y = element_blank(), # remove minor horizontal grid lines
# remove legend
legend.position = "none",
plot.title = element_text(margin = margin(t = 0, r = 0, b = 10, l = 0)),
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
panel.border = element_blank(), # remove outer panel border
axis.ticks.y = element_blank(), # remove ticks from y axis
text = element_text(family = "Arial")) +
ggtitle('gesture production by participant') +
xlab('participant id (arranged by total gesture production)\n') +
ylab('proportion of trials with gesture')
ggplotly(dist_gest_04, tooltip = c("total mean", "spatial mean", "percent_gestured", "SPACE_IV"))
dist_gest_04 <- X %>%
ggplot() +
geom_hline(aes(yintercept = mean(percent_gestured)*2, 'total mean' = 0.524),
color = "#2e184b", size = 0.3) +
# label mean line
geom_text(x = 3, y = (mean(X$percent_gestured)*2 + 0.03),
aes(label = "total mean = "), color = "#2e184b") +
geom_text(x = 4.9, y = (mean(X$percent_gestured)*2 + 0.03),
aes(label = round(mean(percent_gestured)*2, digits = 3)), color = "#2e184b") +
geom_col(aes(x = reorder(ID, percent_gestured), y = percent_gestured, #group = SUBJ,
fill = as.factor(SPACE_IV), alpha = .85)) +
# change color scheme of fill colors
scale_fill_manual("fill_constant", values = c("#8da0cb", "#66c2a5")) +
scale_y_continuous(expand = c(0, 0)) +
# scale_x_continuous(breaks = c(seq(1:24)), expand = c(0, 0)) +
theme_light() +
theme(panel.grid.major.x = element_blank(), # remove vertical grid lines
panel.grid.minor.x = element_blank(), # remove vertical grid lines
panel.grid.minor.y = element_blank(), # remove minor horizontal grid lines
# remove legend
legend.position = "none",
plot.title = element_text(margin = margin(t = 0, r = 0, b = 10, l = 0)),
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
panel.border = element_blank(), # remove outer panel border
axis.ticks.y = element_blank(), # remove ticks from y axis
text = element_text(family = "Arial")) +
ggtitle('gesture production by participant') +
xlab('participant id (arranged by total gesture production)\n') +
ylab('proportion of trials with gesture')
ggplotly(dist_gest_04, tooltip = c("total mean", "spatial mean", "percent_gestured", "SPACE_IV"))
dist_gest_04 <- X %>%
ggplot() +
geom_hline(aes(yintercept = mean(percent_gestured)*2, 'total mean' = 0.524),
color = "#2e184b", size = 0.3) +
# label mean line
geom_text(x = 3, y = (mean(X$percent_gestured)*2 + 0.03),
aes(label = "total mean = "), color = "#2e184b") +
geom_text(x = 4.75, y = (mean(X$percent_gestured)*2 + 0.03),
aes(label = round(mean(percent_gestured)*2, digits = 3)), color = "#2e184b") +
geom_col(aes(x = reorder(ID, percent_gestured), y = percent_gestured, #group = SUBJ,
fill = as.factor(SPACE_IV), alpha = .85)) +
# change color scheme of fill colors
scale_fill_manual("fill_constant", values = c("#8da0cb", "#66c2a5")) +
scale_y_continuous(expand = c(0, 0)) +
# scale_x_continuous(breaks = c(seq(1:24)), expand = c(0, 0)) +
theme_light() +
theme(panel.grid.major.x = element_blank(), # remove vertical grid lines
panel.grid.minor.x = element_blank(), # remove vertical grid lines
panel.grid.minor.y = element_blank(), # remove minor horizontal grid lines
# remove legend
legend.position = "none",
plot.title = element_text(margin = margin(t = 0, r = 0, b = 10, l = 0)),
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
panel.border = element_blank(), # remove outer panel border
axis.ticks.y = element_blank(), # remove ticks from y axis
text = element_text(family = "Arial")) +
ggtitle('gesture production by participant') +
xlab('participant id (arranged by total gesture production)\n') +
ylab('proportion of trials with gesture')
ggplotly(dist_gest_04, tooltip = c("total mean", "spatial mean", "percent_gestured", "SPACE_IV"))
(sum(X[X$SPACE_IV == 1, "percent_gestured"]) /
tally(X[X$SPACE_IV == 1, "percent_gestured"]))[1,1]
(sum(X[X$SPACE_IV == 0, "percent_gestured"]) /
tally(X[X$SPACE_IV == 0, "percent_gestured"]))[1,1])
(sum(X[X$SPACE_IV == 0, "percent_gestured"]) /
tally(X[X$SPACE_IV == 0, "percent_gestured"]))[1,1]
dist_gest_04 <- X %>%
ggplot() +
# mean gesture production line
#  geom_hline(aes(yintercept = mean(percent_gestured)*2), color = "#2e184b", size = 0.3) +
geom_hline(aes(yintercept = mean(percent_gestured)*2, 'total mean' = 0.524),
color = "#2e184b", size = 0.3) +
# label mean line
#    geom_text(x = 3, y = (mean(X$percent_gestured)*2 + 0.03),
#              aes(label = "total mean = "), color = "#2e184b") +
#
#    geom_text(x = 4.75, y = (mean(X$percent_gestured)*2 + 0.03),
#              aes(label = round(mean(percent_gestured)*2, digits = 3)), color = "#2e184b") +
geom_col(aes(x = reorder(ID, percent_gestured), y = percent_gestured, #group = SUBJ,
fill = as.factor(SPACE_IV), alpha = .85)) +
### group means... cluncky code: there must be a simpler way!
# spatial mean line
geom_hline(aes(yintercept =
(sum(X[X$SPACE_IV == 1, "percent_gestured"]) /
tally(X[X$SPACE_IV == 1, "percent_gestured"]))[1,1], 'spatial mean' = 0.305),
color = "#5bae94") +
# spatial mean labels
#  geom_text(x = 3,
#            y = (sum(X[X$SPACE_IV == 1, "percent_gestured"]) /
#              tally(X[X$SPACE_IV == 1, "percent_gestured"])[1,1] + 0.03)[1,1],
#            aes(label = "spatial mean = "), color = "#5bae94") +
#  geom_text(x = 7,
#            y = (sum(X[X$SPACE_IV == 1, "percent_gestured"]) /
#              tally(X[X$SPACE_IV == 1, "percent_gestured"])[1,1] + 0.03)[1,1],
#
#            aes(label = round((sum(X[X$SPACE_IV == 1, "percent_gestured"]) /
#      tally(X[X$SPACE_IV == 1, "percent_gestured"]))[1,1], digits = 3)), color = "#5bae94") +
# non-spatial mean labels
#  geom_text(x = 3.5,
#            y = (sum(X[X$SPACE_IV == 0, "percent_gestured"]) /
#              tally(X[X$SPACE_IV == 0, "percent_gestured"])[1,1] + 0.03)[1,1],
#            aes(label = "non-spatial mean = "), color = "#5bae94") +
#  geom_text(x = 7.5,
#            y = (sum(X[X$SPACE_IV == 0, "percent_gestured"]) /
#              tally(X[X$SPACE_IV == 0, "percent_gestured"])[1,1] + 0.03)[1,1],
#            aes(label = round((sum(X[X$SPACE_IV == 0, "percent_gestured"]) /
#      tally(X[X$SPACE_IV == 0, "percent_gestured"]))[1,1], digits = 3)), color = "#5bae94") +
#  geom_text(x = 6, y = 0.554, aes(label = round(mean(percent_gestured)*2, digits = 3)),
#                                  color = "#2e184b") +
# non-spatial mean
geom_hline(aes(yintercept =
(sum(X[X$SPACE_IV == 0, "percent_gestured"]) /
tally(X[X$SPACE_IV == 0, "percent_gestured"]))[1,1]), 'non-spatial mean' = 0.219,
color = "#7e90b6") +
#  geom_hline(aes(yintercept = mean((X[X$SPACE_IV == 0, "percent_gestured"])[,])), color = "#FFA319") +
#  geom_hline(aes(yintercept = mean((X[X$SPACE_IV == 1, "percent_gestured"])[,])), color = "#FFA319") +
### temporarily remove ribbon (need to fix error margin)
#   annotate('ribbon', x = c(-Inf, Inf),
#           ymin = summary_subj_err_gest$mean_percent_gestured - summary_subj_err_gest$mean_gesture_se,
#          ymax = summary_subj_err_gest$mean_percent_gestured + summary_subj_err_gest$mean_gesture_se,
#         alpha = 0.2, fill = "#628B9F") +
geom_col(aes(x = reorder(ID, percent_gestured), y = percent_gestured, #group = SUBJ,
fill = as.factor(SPACE_IV), alpha = .85)) +
# scale_y_continuous(expand = c(0, 0)) +
# scale_x_continuous(breaks = c(seq(1:24)), expand = c(0, 0)) +
# change color scheme of fill colors
scale_fill_manual("fill_constant", values = c("#8da0cb", "#66c2a5")) +
scale_y_continuous(expand = c(0, 0)) +
# scale_x_continuous(breaks = c(seq(1:24)), expand = c(0, 0)) +
theme_light() +
theme(panel.grid.major.x = element_blank(), # remove vertical grid lines
panel.grid.minor.x = element_blank(), # remove vertical grid lines
panel.grid.minor.y = element_blank(), # remove minor horizontal grid lines
# remove legends (unnecessary here)
legend.position = "none", ### TEMP
plot.title = element_text(margin = margin(t = 0, r = 0, b = 10, l = 0)),
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
panel.border = element_blank(), # remove outer panel border
axis.ticks.y = element_blank(), # remove ticks from y axis
text = element_text(family = "Arial")) +
ggtitle('gesture production by participant') +
xlab('participant id (arranged by total gesture production)\n') +
ylab('proportion of trials with gesture')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggraph)
library(igraph)
library(waffle)
library(extrafont)
library(plotly)
library(ggpubr)
library(cowplot)
library(wesanderson)
library(tidyverse)
set.seed(1618)
gesture_proportion_violin <- prop_subj_gesture_type_axis %>%
plot_ly(type = 'violin') %>%
add_trace(
x = ~ item_axis[prop_subj_gesture_type_axis$trial_type == 'spatial'],
y = ~ prop_gesture[prop_subj_gesture_type_axis$trial_type == 'spatial'],
legendgroup = 'spatial',
scalegroup = 'spatial',
name = 'spatial',
side = 'negative', # left side
opacity = 0.8,
box = list(
visible = F
),
meanline = list(
visible = T
),
line = list(
color = '#66c2a5' # selected from qualitative colorblind safe scheme from Color Brewer
)
) %>%
add_trace(
x = ~ item_axis[prop_subj_gesture_type_axis$trial_type == 'non-spatial'],
y = ~ prop_gesture[prop_subj_gesture_type_axis$trial_type == 'non-spatial'],
legendgroup = 'non-spatial',
scalegroup = 'non-spatial',
name = 'non-spatial',
side = 'positive', # right side
opacity = 0.7,
box = list(
visible = F
),
meanline = list(
visible = T
),
line = list(
color = '#8da0cb' # selected from qualitative colorblind safe scheme from Color Brewer
)
) %>%
layout(
title = "Gesture Production by Trial Type<br><i>(proportion observations are grouped by subject)",
xaxis = list(
title = ""
),
yaxis = list(
title = "proportion of trials with gesture",
zeroline = F,
range = c(0, 1)
),
violingap = 0,
violingroupgap = 0.1,
violinmode = 'overlay', # because violins are split they need to be overlaid
tracegroupgap = 1,
margin = list(
l = -1,
r = 0,
b = -1,
t = -5,
pad = 0
)
gesture_proportion_violin
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(ggplot2)
library(plotly)
library(ggthemes)
library(magrittr)
library(tidyverse)
p <- plot_ly(prop_subj_gesture_type_axis, x = ~ item_axis,
y = ~ prop_gesture, color = ~ trial_type, type = "box",
boxpoints = "all", jitter = 0.3, pointpos = 0) %>%
layout(boxmode = "group")
p
ordered_gest_data <- prop_subj_gesture_type_axis %>%
factor(trial_type, levels = c("spatial", "non-spatial"))
View(prop_gesture_type_axis)
View(prop_subj_gesture_type_axis)
ordered_gest_data <- prop_subj_gesture_type_axis %>%
factor(prop_subj_gesture_type_axis$trial_type, levels = c("spatial", "non-spatial"))
View(prop_subj_gesture_type_axis)
ordered_gest_data <- prop_subj_gesture_type_axis %>%
factor(prop_subj_gesture_type_axis$trial_type, levels = c("spatial", "non-spatial"))
ordered_gest_data <- factor(
prop_subj_gesture_type_axis$trial_type, levels = c("spatial", "non-spatial"))
p <- plot_ly(y = ~ ordered_gest_data$prop_gesture,
type = "box", boxpoints = "all", jitter = 0.3,
pointpos = 0)
p <- plot_ly(ordered_gest_data, x = ~ item_axis,
y = ~ prop_gesture, color = ~ trial_type, type = "box",
boxpoints = "all", jitter = 0.3, pointpos = 0) %>%
layout(boxmode = "group")
ordered_gest_data <- data.frame(factor(
prop_subj_gesture_type_axis$trial_type, levels = c("spatial", "non-spatial")))
p <- plot_ly(y = ~ ordered_gest_data$prop_gesture,
type = "box", boxpoints = "all", jitter = 0.3,
pointpos = 0)
p <- plot_ly(ordered_gest_data, x = ~ item_axis,
y = ~ prop_gesture, color = ~ trial_type, type = "box",
boxpoints = "all", jitter = 0.3, pointpos = 0) %>%
layout(boxmode = "group")
p
View(ordered_gest_data)
prop_subj_gesture_type_axis$trial_type <- data.frame(factor(
prop_subj_gesture_type_axis$trial_type, levels = c("spatial", "non-spatial")))
p <- plot_ly(y = ~ prop_subj_gesture_type_axis$prop_gesture,
type = "box", boxpoints = "all", jitter = 0.3,
pointpos = 0)
p <- plot_ly(prop_subj_gesture_type_axis, x = ~ item_axis,
y = ~ prop_gesture, color = ~ trial_type, type = "box",
boxpoints = "all", jitter = 0.3, pointpos = 0) %>%
layout(boxmode = "group")
p
prop_subj_gesture_type_axis$trial_type <- factor(
prop_subj_gesture_type_axis$trial_type, levels = c("spatial", "non-spatial"))
p <- plot_ly(y = ~ prop_subj_gesture_type_axis$prop_gesture,
type = "box", boxpoints = "all", jitter = 0.3,
pointpos = 0)
p <- plot_ly(prop_subj_gesture_type_axis, x = ~ item_axis,
y = ~ prop_gesture, color = ~ trial_type, type = "box",
boxpoints = "all", jitter = 0.3, pointpos = 0) %>%
layout(boxmode = "group")
p
View(prop_subj_gesture_type_axis)
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(ggplot2)
library(plotly)
library(ggthemes)
library(magrittr)
library(tidyverse)
# ELAN encoding (n=24) with added accuracy, item code, and other item variables
study_01 <- readr::read_csv("~/R/CGChains/data/CGChains_CODED-ELAN-DATA_2018-04-24.csv")
# encode gesture presence and spatiality as dichotomous indicator variables
study_01 <- study_01 %>%
# encode as data frame
as_data_frame() %>%
# add dichotomous variables
mutate(GESTURE_PRESENT = if_else(study_01$`gesture_presence` == "yes", 1, 0)) %>%
mutate(SPATIAL_TRIAL = if_else(study_01$trial_type == "spatial", 1, 0)) %>%
mutate(VERTICAL_TRIAL = if_else(study_01$item_axis == "vertical", 1, 0)) %>%
# add difficulty variable based on deSoto (1965)
mutate(deSoto_difficulty = cut(x = correct_deSoto_without_invalid, breaks = c(38.3, 41.5, 60.5, 61.8, 100),
right = FALSE, labels = c("HARDEST", "HARD", "EASY", "EASIEST")))
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(ggplot2)
library(plotly)
library(ggthemes)
library(magrittr)
library(tidyverse)
# ELAN encoding (n=24) with added accuracy, item code, and other item variables
study_01 <- readr::read_csv("~/R/CGChains/data/CGChains_CODED-ELAN-DATA_2018-04-24.csv")
# encode gesture presence and spatiality as dichotomous indicator variables
study_01 <- study_01 %>%
# encode as data frame
as_data_frame() %>%
# add dichotomous variables
mutate(GESTURE_PRESENT = if_else(study_01$`gesture_presence` == "yes", 1, 0)) %>%
mutate(SPATIAL_TRIAL = if_else(study_01$trial_type == "spatial", 1, 0)) %>%
mutate(VERTICAL_TRIAL = if_else(study_01$item_axis == "vertical", 1, 0)) %>%
# add difficulty variable based on deSoto (1965)
mutate(deSoto_difficulty = cut(x = correct_deSoto_without_invalid, breaks = c(38.3, 41.5, 60.5, 61.8, 100),
right = FALSE, labels = c("HARDEST", "HARD", "EASY", "EASIEST")))
study_01 <- study_01 %>%
# encode as data frame
as_data_frame() %>%
# add dichotomous variables
mutate(GESTURE_PRESENT = if_else(study_01$`gesture_presence` == "yes", 1, 0)) %>%
mutate(SPATIAL_TRIAL = if_else(study_01$trial_type == "spatial", 1, 0)) %>%
mutate(VERTICAL_TRIAL = if_else(study_01$item_axis == "vertical", 1, 0)) %>%
# add difficulty variable based on deSoto (1965)
mutate(deSoto_difficulty = cut(x = correct_deSoto_without_invalid, breaks = c(38.3, 41.5, 60.5, 61.8, 100),
right = FALSE, labels = c("HARDEST", "HARD", "EASY", "EASIEST")))
study_01 <- study_01 %>%
# encode as data frame
as_data_frame() %>%
# add dichotomous variables
mutate(GESTURE_PRESENT = if_else(study_01$`gesture_presence` == "yes", 1, 0)) %>%
mutate(SPATIAL_TRIAL = if_else(study_01$trial_type == "spatial", 1, 0)) %>%
mutate(VERTICAL_TRIAL = if_else(study_01$item_axis == "vertical", 1, 0)) %>%
# add difficulty variable based on deSoto (1965)
mutate(deSoto_difficulty = cut(x = correct_deSoto_without_invalid, breaks = c(38.3, 41.5, 60.5, 61.8, 100),
right = FALSE, labels = c("HARDEST", "HARD", "EASY", "EASIEST")))
study_01 <- study_01 %>%
# encode as data frame
#as_data_frame() %>%
# add dichotomous variables
mutate(GESTURE_PRESENT = if_else(study_01$`gesture_presence` == "yes", 1, 0)) %>%
mutate(SPATIAL_TRIAL = if_else(study_01$trial_type == "spatial", 1, 0)) %>%
mutate(VERTICAL_TRIAL = if_else(study_01$item_axis == "vertical", 1, 0)) %>%
# add difficulty variable based on deSoto (1965)
mutate(deSoto_difficulty = cut(x = correct_deSoto_without_invalid, breaks = c(38.3, 41.5, 60.5, 61.8, 100),
right = FALSE, labels = c("HARDEST", "HARD", "EASY", "EASIEST")))
